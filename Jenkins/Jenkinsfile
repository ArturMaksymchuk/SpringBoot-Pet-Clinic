pipeline{
    agent any
    stages{
        stage("package app"){
            steps{
                sh "mvn package"
            }
            
        }
        stage("create docker image"){
            steps{
                
                sh "docker build  -t martur/app:latest  -f docker/dockerfile ."
                
            }
            
        }
        stage("push image to hub"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'githubpsw', variable: 'githubpwd')]) {
    sh "docker login -u martur -p '${githubpwd}' "
}
                }
                sh "docker push martur/app:latest "
                
            }
            
        }
        stage("create cluster") {
            environment {
                cluster_name = 'clinic1'
                region_name = 'eu-central-1'
                aws_instance_type = 't2.micro'
                nodes_qty = 1
            }
            steps {
                script {
                    withAWS(region: 'eu-central-1', credentials: 'aws-credentials') {
                        def cluster_exists = sh(script: "eksctl get cluster $cluster_name | awk 'NR==2{print \$1}'")
                        if (cluster_exists == '$cluster_name') {
                            echo 'cluster created'
                            sh "aws eks update-kubeconfig --name $cluster_name"
                            sh "kubectl apply -f k8s/clinic.yaml"
                        } else {
                            sh "eksctl create cluster -f k8s/cluster.yaml"
                            sh "kubectl apply -f k8s/clinic.yaml"
                        }
                        
                    }
                }
                echo "done"
            }
        }
    }
    
}
// withCredentials([<object of type com.cloudbees.jenkins.plugins.awscredentials.AmazonWebServicesCredentialsBinding>]) {
    // some block
// }

// kubeconfig(credentialsId: 'eks-tocken', serverUrl: '') {
//     // some block
// }

// stage("Deploy to EKS Cluster") {
//       steps {
//         script {
//           withCredentials([string(credentialsId: 'aws-creds', variable: 'AWS_CREDENTIALS')]) {
//             sh "export AWS_ACCESS_KEY_ID=$(echo ${AWS_CREDENTIALS} | cut -d',' -f1)"
//             sh "export AWS_SECRET_ACCESS_KEY=$(echo ${AWS_CREDENTIALS} | cut -d',' -f2)"
//             sh "export AWS_DEFAULT_REGION=${AWS_REGION}"

//             sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}"
//             sh "aws-iam-authenticator token -i ${EKS_CLUSTER_NAME} | awk '{print $2}' | base64 --decode > token"
//             sh "export AWS_AUTH=$(cat token)"

//             sh "kubectl set image deployment/your-app your-app=${DOCKER_IMAGE}:${env.BUILD_NUMBER} --record"
//           }
//         }
//       }
//     }
//   }

//   post {
//     always {
//       sh "rm -f token"
//       sh "aws --profile default configure set aws_access_key_id ''"
//       sh "aws --profile default configure set aws_secret_access_key ''"
//     }
//   }
// }