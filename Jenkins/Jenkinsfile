pipeline{
    agent any
    stages{
        stage("package app"){
            steps{
                sh "mvn package"
                sh "pwd"
                sh "ls -la target/"
            }
            
        }
        stage("create docker image"){
            steps{
                // sh "cp target/japp-1.jar docker/japp.jar"
                // sh "ls -la docker/"
                
                sh "docker build  -t martur/app:latest  -f docker/dockerfile ."
                
            }
            
        }
        stage("push image to hub"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'githubpsw', variable: 'githubpwd')]) {
    sh "docker login -u martur -p '${githubpwd}' "
}
                }
                sh "docker push martur/app:latest "
                sh "docker rmi martur/app:latest "
            }
            
        }
        stage("create cluster") {
            environment {
                cluster_name = 'clinic1'
             region_name = 'eu-central-1'
              aws_instance_type = 't2.micro'
              nodes_qty = 1
              }
             steps {
              script {
                 withAWS(region: 'eu-central-1', credentials: 'aws-credentials') {
                     // Run command to get the current cluster name
                      def current_cluster_name = sh(
                    script: "eksctl get cluster $cluster_name | awk 'NR==2{print \$1}'",
                    returnStdout: true
                     ).trim()
                     echo "Current cluster name: $current_cluster_name"

                     // Compare the current cluster name with the expected cluster name
                     if (current_cluster_name == cluster_name) {
                          sh "aws eks update-kubeconfig --name $cluster_name"
                          sh "kubectl apply -f k8s/clinic.yaml"
                          
                      } else {
                         sh "eksctl create cluster -f k8s/cluster.yaml"
                         sh "kubectl apply -f k8s/clinic.yaml"

                         
                      }
                     }
                 }
             }
        }
   
    }
    
}