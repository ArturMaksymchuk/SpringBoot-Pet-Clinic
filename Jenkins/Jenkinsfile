pipeline{
    agent any
    stages{
        // stage("package app"){
        //     steps{
        //         sh "mvn package"
        //     }
            
        // }
//         stage("create docker image"){
//             steps{
                
//                 sh "docker build  -t martur/app:latest  -f docker/dockerfile ."
                
//             }
            
//         }
        stage("push image to hub"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'githubpsw', variable: 'githubpwd')]) {
    sh "docker login -u martur -p '${githubpwd}' "
}
                }
                sh "docker push martur/app:latest "
                
            }
            
        }
        stage("kubectl rollout"){
            steps{
                script{
                    withKubeCredentials(kubectlCredentials: 
                    [[caCertificate: '', clusterName: '', contextName: '', credentialsId: 'aws-jenkins-sekret-key', namespace: '', serverUrl: ''], 
                    [caCertificate: '', clusterName: '', contextName: '', credentialsId: 'aws-jenkins-acces-key', namespace: '', serverUrl: '']]) {
            sh "export AWS_ACCESS_KEY_ID='${githubpwd}' | cut -d',' -f1)"
            sh "export AWS_SECRET_ACCESS_KEY='${githubpwd}' | cut -d',' -f2)"
            sh "export AWS_DEFAULT_REGION='eu-central-1'"
}
                }
                sh "eksctl get cluster  "
                
            }
            
        }
    }
    
}


// kubeconfig(credentialsId: 'eks-tocken', serverUrl: '') {
//     // some block
// }

// stage("Deploy to EKS Cluster") {
//       steps {
//         script {
//           withCredentials([string(credentialsId: 'aws-creds', variable: 'AWS_CREDENTIALS')]) {
            // sh "export AWS_ACCESS_KEY_ID=$(echo ${AWS_CREDENTIALS} | cut -d',' -f1)"
            // sh "export AWS_SECRET_ACCESS_KEY=$(echo ${AWS_CREDENTIALS} | cut -d',' -f2)"
            // sh "export AWS_DEFAULT_REGION=${AWS_REGION}"

//             sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}"
//             sh "aws-iam-authenticator token -i ${EKS_CLUSTER_NAME} | awk '{print $2}' | base64 --decode > token"
//             sh "export AWS_AUTH=$(cat token)"

//             sh "kubectl set image deployment/your-app your-app=${DOCKER_IMAGE}:${env.BUILD_NUMBER} --record"
//           }
//         }
//       }
//     }
//   }

//   post {
//     always {
//       sh "rm -f token"
//       sh "aws --profile default configure set aws_access_key_id ''"
//       sh "aws --profile default configure set aws_secret_access_key ''"
//     }
//   }
// }